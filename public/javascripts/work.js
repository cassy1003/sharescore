// Generated by CoffeeScript 1.3.3

namespace('_socket', function(exports) {
  var socket;
  socket = io.connect(null, {
    port: 7777
  });
  socket.on('connect', function(message) {});
  socket.on('message', function(message) {
    return _handler[message.method](message);
  });
  return exports.send = function(params) {
    return socket.emit('message', params);
  };
});

namespace('_handler', function(exports) {
  exports.sendMessage = function() {
    var message, type, who, whom;
    message = $('#send-message').val();
    if (!message) {
      alert('input message');
      return;
    }
    whom = $('#send-whom').attr('value');
    who = $('#send-who').attr('value');
    type = $('#send-type').attr('value');
    _socket.send({
      method: 'whisper',
      type: type,
      msg: message,
      whom: whom,
      who: who
    });
    return $('#send-message').val('');
  };
  exports.selectSendMenu = function(label, menu) {
    $("#send-" + menu).attr('value', label);
    return $("#send-" + menu).text($("#send-" + menu + "-" + label).text());
  };
  exports.getFeed = function(params) {
    return $("#feed-area").prepend(params.text);
  };
  return exports.showAlert = function(params) {
    return alert(params.message);
  };
});

namespace('rtc.video', function(exports) {
  var getUserMedia, onUserMediaError, onUserMediaSuccess, _videoUrl;
  _videoUrl = '';
  exports.show = function() {
    return $('#localVideo').attr('src', _videoUrl);
  };
  exports.hide = function() {
    $('#localVideo').attr('src', '');
    return sample.face.drawEnd();
  };
  exports.on = function() {
    return getUserMedia();
  };
  getUserMedia = function() {
    try {
      navigator.webkitGetUserMedia({
        audio: true,
        video: true
      }, onUserMediaSuccess, onUserMediaError);
      return console.log("Requested access to local media with new syntax.");
    } catch (e1) {
      try {
        navigator.webkitGetUserMedia("video,audio", onUserMediaSuccess, onUserMediaError);
        return console.log("Requested access to local media with old syntax.");
      } catch (e2) {
        alert("webkitGetUserMedia() failed. Is the MediaStream flag enabled in about:flags?");
        return console.log("webkitGetUserMedia failed with exception: " + e.message);
      }
    }
  };
  onUserMediaSuccess = function(stream) {
    console.log("User has granted access to local media.");
    return _videoUrl = webkitURL.createObjectURL(stream);
  };
  return onUserMediaError = function(error) {
    return console.log("Failed to get access to local media. Error code was " + error.code);
  };
});

namespace('rtc.face', function(exports) {
  var draw, image, _comp, _drawInterval, _errorC, _image, _isDraw, _socket;
  image = new Image();
  _image = '';
  _drawInterval = '';
  _comp = [];
  _isDraw = false;
  _socket = false;
  _errorC = 0;
  exports.drawStart = function() {
    if (_isDraw) {
      return;
    }
    _isDraw = true;
    return _drawInterval = setInterval(function() {
      return draw();
    }, 100);
  };
  exports.drawEnd = function() {
    if (!_isDraw) {
      return;
    }
    _isDraw = false;
    return clearInterval(_drawInterval);
  };
  draw = function() {
    var canvas, comp, context, context2, height, i, localCanvas, localVideo, width, _i, _ref, _results;
    localVideo = $('#localVideo');
    localCanvas = $('#localCanvas');
    canvas = document.createElement('canvas');
    width = localVideo.width();
    height = localVideo.height();
    canvas.width = width;
    canvas.height = height;
    context = canvas.getContext('2d');
    context.drawImage(localVideo.get(0), 0, 0, width, height);
    comp = ccv.detect_objects({
      "canvas": ccv.grayscale(canvas),
      "cascade": cascade,
      "interval": 5,
      "min_neighbors": 1
    });
    if (comp.length > 0) {
      _comp = comp;
      _errorC = 0;
    } else {
      _errorC += 1;
      if (_errorC >= 20) {
        _comp = [];
      }
    }
    context2 = localCanvas[0].getContext('2d');
    context2.drawImage(localVideo.get(0), 0, 0, width, height);
    context2.strokeStyle = "#FF0000";
    context2.lineWidth = 10;
    if (_comp.length > 0) {
      if (!_image) {
        return;
      }
      _results = [];
      for (i = _i = 0, _ref = _comp.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (_image === '/images/square.gif') {
          _results.push(context2.strokeRect(_comp[i].x - 30, _comp[i].y - 30, _comp[i].width + 60, _comp[i].height + 60));
        } else {
          _results.push(context2.drawImage(image, _comp[i].x - 30, _comp[i].y - 30, _comp[i].width + 60, _comp[i].height + 60));
        }
      }
      return _results;
    } else {
      return console.log('none face');
    }
  };
  return exports.changeImg = function(img) {
    if (!img) {
      _image = '';
      return;
    }
    _image = "/images/" + img + ".gif";
    if (img !== 'square') {
      return image.src = _image;
    }
  };
});
